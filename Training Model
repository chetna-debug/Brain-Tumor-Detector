import os
import numpy as np
import cv2
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.utils import to_categorical
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

# Load and preprocess images
def load_data(data_dir):
    data = []
    labels = []
    for category in ["yes", "no"]:
        folder_path = os.path.join(data_dir, category)
        label = 1 if category == "yes" else 0
        for img_name in os.listdir(folder_path):
            img_path = os.path.join(folder_path, img_name)
            try:
                img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
                img = cv2.resize(img, (100, 100))
                data.append(img)
                labels.append(label)
            except Exception as e:
                print("Error loading image:", img_path, e)

    data = np.array(data) / 255.0
    data = data.reshape(-1, 100, 100, 1)
    labels = to_categorical(labels)
    return data, labels

# Load dataset
X, y = load_data(r"C:\Users\cheth\New folder\Datasets\YES\NO")

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build CNN model
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(100, 100, 1)),
    MaxPooling2D(2, 2),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Flatten(),
    Dropout(0.5),
    Dense(64, activation='relu'),
    Dense(2, activation='softmax')
])

# Compile
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train
history = model.fit(X_train, y_train, epochs=10, validation_data=(X_test, y_test))

# Save the model
if not os.path.exists("model"):
    os.makedirs("model")
model.save("model/brain_tumor_model.h5")
print("âœ… Model saved as 'model/brain_tumor_model.h5'")

# Plot accuracy
plt.plot(history.history['accuracy'], label='Train Acc')
plt.plot(history.history['val_accuracy'], label='Val Acc')
plt.title("Training vs Validation Accuracy")
plt.xlabel("Epochs")
plt.ylabel("Accuracy")
plt.legend()
plt.show()
